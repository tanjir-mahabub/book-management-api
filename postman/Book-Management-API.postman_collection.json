{
  "info": {
    "name": "Book Management API",
    "description": "Complete API collection for the Book Management System built with NestJS. Includes all endpoints for managing authors and books with validation, error handling, and pagination.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "book-management-api"
  },
  "item": [
    {
      "name": "Health & Info",
      "item": [
        {
          "name": "Get API Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            },
            "description": "Returns API metadata including name, version, available endpoints, and documentation links."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains API name', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.eql('Book Management API');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Health check endpoint for monitoring. Returns server status, uptime, and environment."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Status is ok', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('ok');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "API information and health monitoring endpoints"
    },
    {
      "name": "Authors",
      "item": [
        {
          "name": "Create Author",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Ernest\",\n  \"lastName\": \"Hemingway\",\n  \"bio\": \"American novelist, short-story writer, and journalist. Known for his economical and understated style.\",\n  \"birthDate\": \"1899-07-21\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/authors",
              "host": ["{{baseUrl}}"],
              "path": ["authors"]
            },
            "description": "Create a new author with firstName, lastName, optional bio, and optional birthDate."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has author ID', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.environment.set('authorId', jsonData.id);",
                  "});",
                  "",
                  "pm.test('Has timestamps', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('createdAt');",
                  "    pm.expect(jsonData).to.have.property('updatedAt');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get All Authors (Paginated)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/authors?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["authors"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number (default: 1)"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page (default: 10)"
                }
              ]
            },
            "description": "Get paginated list of all authors. Supports pagination parameters."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('items');",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData).to.have.property('page');",
                  "    pm.expect(jsonData).to.have.property('limit');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Search Authors by Name",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/authors?search=Orwell",
              "host": ["{{baseUrl}}"],
              "path": ["authors"],
              "query": [
                {
                  "key": "search",
                  "value": "Orwell",
                  "description": "Search by firstName or lastName (case-insensitive, partial match)"
                }
              ]
            },
            "description": "Search authors by firstName or lastName with partial, case-insensitive matching."
          },
          "response": []
        },
        {
          "name": "Get Author by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/authors/{{authorId}}",
              "host": ["{{baseUrl}}"],
              "path": ["authors", "{{authorId}}"]
            },
            "description": "Get a single author by ID. Returns 404 if not found."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has author data', function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id');",
                  "        pm.expect(jsonData).to.have.property('firstName');",
                  "        pm.expect(jsonData).to.have.property('lastName');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Author",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"bio\": \"Updated biography with new information.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/authors/{{authorId}}",
              "host": ["{{baseUrl}}"],
              "path": ["authors", "{{authorId}}"]
            },
            "description": "Update an author with partial data. Returns 404 if author not found."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Author (Success)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/authors/{{authorId}}",
              "host": ["{{baseUrl}}"],
              "path": ["authors", "{{authorId}}"]
            },
            "description": "Delete an author by ID. Returns 204 on success, 404 if not found, 400 if author has books."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204, 404, or 400', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([204, 404, 400]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "CRUD operations for authors"
    },
    {
      "name": "Books",
      "item": [
        {
          "name": "Create Book",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"The Old Man and the Sea\",\n  \"isbn\": \"978-0-684-80122-3\",\n  \"publishedDate\": \"1952-09-01\",\n  \"genre\": \"Literary Fiction\",\n  \"authorId\": \"{{authorId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/books",
              "host": ["{{baseUrl}}"],
              "path": ["books"]
            },
            "description": "Create a new book linked to an author. Returns 400 if author not found, 409 if ISBN already exists."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    pm.test('Status code is 201', function () {",
                  "        pm.response.to.have.status(201);",
                  "    });",
                  "    ",
                  "    pm.test('Response has book ID', function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id');",
                  "        pm.environment.set('bookId', jsonData.id);",
                  "    });",
                  "    ",
                  "    pm.test('Response includes author info', function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('author');",
                  "        pm.expect(jsonData.author).to.have.property('firstName');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get All Books (Paginated)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/books?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["books"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page"
                }
              ]
            },
            "description": "Get paginated list of all books with author information."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('items');",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Search Books by Title",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/books?search=Harry Potter",
              "host": ["{{baseUrl}}"],
              "path": ["books"],
              "query": [
                {
                  "key": "search",
                  "value": "Harry Potter",
                  "description": "Search by title or ISBN (case-insensitive, partial match)"
                }
              ]
            },
            "description": "Search books by title or ISBN with partial, case-insensitive matching."
          },
          "response": []
        },
        {
          "name": "Filter Books by Author",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/books?authorId={{authorId}}",
              "host": ["{{baseUrl}}"],
              "path": ["books"],
              "query": [
                {
                  "key": "authorId",
                  "value": "{{authorId}}",
                  "description": "Filter books by specific author ID"
                }
              ]
            },
            "description": "Get all books by a specific author."
          },
          "response": []
        },
        {
          "name": "Get Book by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}"]
            },
            "description": "Get a single book by ID with author information. Returns 404 if not found."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response includes author', function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('author');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Book",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"genre\": \"Classic Literature\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}"]
            },
            "description": "Update a book with partial data. Returns 404 if book not found."
          },
          "response": []
        },
        {
          "name": "Delete Book",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}"]
            },
            "description": "Delete a book by ID. Returns 204 on success, 404 if not found."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([204, 404]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "CRUD operations for books"
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "404 - Author Not Found",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/authors/00000000-0000-0000-0000-000000000000",
              "host": ["{{baseUrl}}"],
              "path": ["authors", "00000000-0000-0000-0000-000000000000"]
            },
            "description": "Example of 404 Not Found error when author doesn't exist."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error response format', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('statusCode', 404);",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "400 - Validation Error",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/authors",
              "host": ["{{baseUrl}}"],
              "path": ["authors"]
            },
            "description": "Example of 400 Bad Request due to missing required field (lastName)."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "400 - Invalid Author ID",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Book\",\n  \"isbn\": \"978-0-000-00000-0\",\n  \"authorId\": \"00000000-0000-0000-0000-000000000000\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/books",
              "host": ["{{baseUrl}}"],
              "path": ["books"]
            },
            "description": "Example of 400 Bad Request when creating book with non-existent author."
          },
          "response": []
        },
        {
          "name": "409 - ISBN Conflict",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Duplicate ISBN Test\",\n  \"isbn\": \"978-0-452-28423-4\",\n  \"authorId\": \"{{authorId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/books",
              "host": ["{{baseUrl}}"],
              "path": ["books"]
            },
            "description": "Example of 409 Conflict error when ISBN already exists (using 1984's ISBN from seed data)."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 409', function () {",
                  "    pm.response.to.have.status(409);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Examples of error responses (404, 400, 409)"
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ]
}

